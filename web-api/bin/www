#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app')
const debug = require('debug')('web-api:server')
const http = require('http')


/**
 * Normalize a port into a number, string, or false.
 */

let normalizePort = (val) =>
{
    let port = parseInt(val, 10)

    if (isNaN(port))
    {
        // named pipe
        return val
    }

    if (port >= 0)
    {
        // port number
        return port
    }

    return false
}


/**
 * Event listener for HTTP server "error" event.
 */

let onError = (err) =>
{
    if (err.syscall !== 'listen')
        throw err

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port

    // handle specific listen errors with friendly messages
    switch (err.code)
    {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges')
            process.exit(1)
            break

        case 'EADDRINUSE':
            console.error(bind + ' is already in use')
            process.exit(1)
            break

        default:
            throw err
    }
}


/**
 * Event listener for HTTP server "listening" event.
 */
let onListening = () =>
{
    const addr = server.address()
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port

    debug('Listening on ' + bind)
}


/**
 * Get port from environment and store in Express.
 */
let port = normalizePort(process.env.PORT || '3000')
app.set('port', port)


/**
 * Create HTTP server.
 */
const server = http.createServer(app)


/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port)
server.on('error', onError)
server.on('listening', onListening)
